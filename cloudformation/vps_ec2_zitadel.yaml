Resources:
  AuthVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: auth

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AuthVPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: auth-public-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AuthVPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: auth-public-2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AuthVPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key: Name
          Value: auth-private-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AuthVPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: 10.0.4.0/24
      Tags:
        - Key: Name
          Value: auth-private-2

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: auth-igw

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref AuthVPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AuthVPC
      Tags:
        - Key: Name
          Value: auth-public-rt

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref AuthVPC
      RouteTableIds:
        - !Ref PublicRouteTable
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "*"
            Resource: "*"

  VPSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for VPS EC2 instance
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  # For SSH access (restrict this to your IP)
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0  # For HTTP access
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0  # For HTTPS access

  VPSInstance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0df368112825f8d8f" # Replace with your Ubuntu AMI if required (this is the standard ubuntu)
      InstanceType: "t3.small"
      KeyName: "VPS" # Name of your existing key pair
      SecurityGroupIds:
        - !Ref VPSSecurityGroup
      UserData:
        Fn::Base64: |
          #!/bin/bash -xe

          # Log all output to a file for debugging
          exec > >(tee /var/log/user-data.log) 2>&1

          echo "Starting user data script execution at $(date)"

          # Wait for cloud-init to complete
          timeout 60 cloud-init status --wait || echo "Cloud-init wait timed out after 60 seconds, continuing anyway"

          # Sleep to allow the system to settle
          sleep 30

          echo "Proceeding with Docker installation at $(date)"

          # Update package lists
          apt-get update

          # Install prerequisites
          apt-get install -y ca-certificates curl gnupg

          # Set up Docker repository
          install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          chmod a+r /etc/apt/keyrings/docker.asc

          # Add Docker repository
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

          # Update package lists again with Docker repository
          apt-get update

          # Install Docker
          apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

          # Add the default user to the docker group
          usermod -aG docker ubuntu

          # Enable and start Docker service
          systemctl enable docker.service
          systemctl enable containerd.service
          systemctl start docker.service

          echo "Docker installation completed successfully at $(date)!"

          # Ensure openssl is installed
          if ! command -v openssl &> /dev/null; then
              echo "openssl not found, installing..."
              apt-get install -y openssl
          fi

          # Create directory structure
          mkdir -p /home/ubuntu/config/zitadel
          mkdir -p /home/ubuntu/traefik/letsencrypt
          mkdir -p /home/ubuntu/machinekey
          
          # Generate random passwords
          POSTGRES_PASSWORD=$(openssl rand -base64 32 | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
          ZITADEL_MASTERKEY=$(openssl rand -base64 32 | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
          
          # Create .env file
          cat > /home/ubuntu/.env << EOF
          POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
          POSTGRES_USER=zitadel
          POSTGRES_DB=zitadel
          ZITADEL_MASTERKEY=${ZITADEL_MASTERKEY}
          ZITADEL_FIRSTINSTANCE_ORG_HUMAN_USERNAME=root@yourdomain.com
          ZITADEL_FIRSTINSTANCE_ORG_HUMAN_PASSWORD=RootPassword1!
          EOF
          
          # Set proper ownership
          chown ubuntu:ubuntu /home/ubuntu/.env
          chmod 600 /home/ubuntu/.env
          
          echo ".env file created successfully at $(date)!"
          
          # Create zitadel.yaml configuration file
          cat > /home/ubuntu/config/zitadel/zitadel.yaml << EOF
          Log:
            Level: 'info'
          
          ExternalSecure: true
          ExternalDomain: 'auth.yourdomain.com'
          ExternalPort: 443
          
          SystemDefaults:
            KeyConfig:
              PrivateKeyLifetime: 8760h
              PublicKeyLifetime: 1080h
          
          Database:
            postgres:
              Host: postgresql
              Port: 5432
              Database: zitadel
              MaxOpenConns: 25
              MaxConnLifetime: 1h
              MaxConnIdleTime: 5m
              Options:
              User:
                Username: zitadel
                Password: ${POSTGRES_PASSWORD}
                SSL:
                  Mode: disable
              Admin:
                Username: zitadel
                Password: ${POSTGRES_PASSWORD}
                SSL:
                  Mode: disable
          EOF
          
          # Create docker-compose.yml file
          cat > /home/ubuntu/docker-compose.yml << 'EOF'
          services:
            traefik:
              image: traefik:v3.4
              container_name: traefik
              restart: unless-stopped
              ports:
                - "80:80"
                - "443:443"
              command:
                - "--log.level=DEBUG"
                - "--api.insecure=false"
                - "--providers.docker=true"
                - "--providers.docker.exposedbydefault=false"
                - "--entrypoints.web.address=:80"
                - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
                - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
                - "--entrypoints.websecure.address=:443"
                - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
                - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
                - "--certificatesresolvers.myresolver.acme.email=admin@yourdomain.com"
                - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
              volumes:
                - /var/run/docker.sock:/var/run/docker.sock:ro
                - ./traefik/letsencrypt:/letsencrypt
              networks:
                - proxy
          
            postgresql:
              image: postgres:16-alpine
              container_name: postgresql
              restart: unless-stopped
              environment:
                POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
                POSTGRES_USER: ${POSTGRES_USER}
                POSTGRES_DB: ${POSTGRES_DB}
              volumes:
                - pgdata:/var/lib/postgresql/data
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
                interval: 5s
                timeout: 5s
                retries: 5
              networks:
                - zitadel
          
            zitadel:
              image: ghcr.io/zitadel/zitadel:latest
              container_name: zitadel
              restart: unless-stopped
              command: >
                start-from-init
                --masterkey "${ZITADEL_MASTERKEY}"
                --tlsMode external
                --config /config/zitadel.yaml
              environment:
                - ZITADEL_FIRSTINSTANCE_ORG_HUMAN_USERNAME=${ZITADEL_FIRSTINSTANCE_ORG_HUMAN_USERNAME}
                - ZITADEL_FIRSTINSTANCE_ORG_HUMAN_PASSWORD=${ZITADEL_FIRSTINSTANCE_ORG_HUMAN_PASSWORD}
              volumes:
                - ./config/zitadel:/config
                - ./machinekey:/machinekey
              depends_on:
                postgresql:
                  condition: service_healthy
              labels:
                - "traefik.enable=true"
                - "traefik.http.routers.zitadel.rule=Host(`auth.yourdomain.com`)"
                - "traefik.http.routers.zitadel.entrypoints=websecure"
                - "traefik.http.routers.zitadel.tls=true"
                - "traefik.http.routers.zitadel.tls.certresolver=myresolver"
                - "traefik.http.services.zitadel.loadbalancer.server.port=8080"
                - "traefik.http.services.zitadel.loadbalancer.server.scheme=h2c"
                - "traefik.http.middlewares.zitadel-https-redirect.redirectscheme.scheme=https"
                - "traefik.http.middlewares.zitadel-https-redirect.redirectscheme.permanent=true"
                - "traefik.http.routers.zitadel-http.rule=Host(`auth.yourdomain.com`)"
                - "traefik.http.routers.zitadel-http.entrypoints=web"
                - "traefik.http.routers.zitadel-http.middlewares=zitadel-https-redirect"
              networks:
                - proxy
                - zitadel
          
          volumes:
            pgdata:
          
          networks:
            proxy:
            zitadel:
          EOF
          
          # Set proper ownership
          chown ubuntu:ubuntu /home/ubuntu/docker-compose.yml
          chown -R ubuntu:ubuntu /home/ubuntu/config
          chown -R ubuntu:ubuntu /home/ubuntu/traefik
          chown -R ubuntu:ubuntu /home/ubuntu/machinekey
          
          echo "ZITADEL configuration completed successfully at $(date)!"

      Tags:
        - Key: "Name"
          Value: "VPSInstance"

Outputs:
  InstancePublicDNS:
    Description: Public DNS name of the EC2 instance
    Value: !GetAtt VPSInstance.PublicDnsName
  
  SetupInstructions:
    Description: Instructions for setting up DNS
    Value: !Sub |
      Your Authentik instance is being set up at: ${VPSInstance.PublicDnsName}
      
      To complete the setup:
      
      1. Create an A record in your DNS settings for 'auth.yourdomain.com' pointing to the EC2 instance's IP address.
      
      2. Wait for DNS propagation (may take up to 24-48 hours, but often much faster).
      
      3. Once DNS is propagated, you can access Authentik at: http://${VPSInstance.PublicDnsName}
      
      4. During first login, you'll be prompted to create an admin account.
      
      5. For security, use a strong password and enable two-factor authentication.
      
      6. Configure SSL certificates for HTTPS access in production environments.
