Resources:
  AuthVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: auth

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AuthVPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: auth-public-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AuthVPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: auth-public-2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AuthVPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key: Name
          Value: auth-private-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AuthVPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: 10.0.4.0/24
      Tags:
        - Key: Name
          Value: auth-private-2

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: auth-igw

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref AuthVPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AuthVPC
      Tags:
        - Key: Name
          Value: auth-public-rt

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref AuthVPC
      RouteTableIds:
        - !Ref PublicRouteTable
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "*"
            Resource: "*"

  VPSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for VPS EC2 instance
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  # For SSH access (restrict this to your IP)
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0  # For HTTP access
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0  # For HTTPS access

  VPSInstance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0df368112825f8d8f" # Replace with your Ubuntu AMI if required (this is the standard ubuntu)
      InstanceType: "t2.micro"
      KeyName: "VPS" # Name of your existing key pair
      SecurityGroupIds:
        - !Ref VPSSecurityGroup
      UserData:
        Fn::Base64: |
          #!/bin/bash -xe
          
          # Log all output to a file for debugging
          exec > >(tee /var/log/user-data.log) 2>&1
          
          echo "Starting user data script execution at $(date)"
          
          # Try to wait for cloud-init with a timeout
          timeout 60 cloud-init status --wait || echo "Cloud-init wait timed out after 60 seconds, continuing anyway"
          
          # Sleep a bit to give system time to settle
          sleep 30
          
          echo "Proceeding with Docker installation at $(date)"
          
          # Update package lists
          apt-get update
          
          # Install prerequisites
          apt-get install -y ca-certificates curl gnupg
          
          # Set up Docker repository
          install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          chmod a+r /etc/apt/keyrings/docker.asc
          
          # Add Docker repository
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
          
          # Update package lists again with Docker repository
          apt-get update
          
          # Install Docker
          apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          
          # Add the default user to the docker group
          usermod -aG docker ubuntu
          
          # Enable Docker service
          systemctl enable docker.service
          systemctl enable containerd.service
          systemctl start docker.service
          
          echo "Docker installation completed successfully at $(date)!"
          
          # Create directories for PocketID and Traefik
          mkdir -p /home/ubuntu/pocketid
          mkdir -p /home/ubuntu/traefik/letsencrypt
          
          # Create docker-compose.yml file with Traefik and PocketID using labels
          cat > /home/ubuntu/docker-compose.yml << 'EOF'
          version: '3'

          services:
            traefik:
              image: traefik:v3.4.0
              container_name: traefik
              restart: unless-stopped
              ports:
                - "80:80"
                - "443:443"
              command:
                - "--api.insecure=false"
                - "--providers.docker=true"
                - "--providers.docker.exposedbydefault=false"
                - "--entrypoints.web.address=:80"
                - "--entrypoints.websecure.address=:443"
                - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
                - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
                - "--certificatesresolvers.myresolver.acme.email=admin@yourdomain.com"
                - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
              volumes:
                - /var/run/docker.sock:/var/run/docker.sock:ro
                - ./traefik/letsencrypt:/letsencrypt

            pocketid:
              image: ghcr.io/pocket-id/pocket-id
              container_name: pocket-id
              restart: unless-stopped
              env_file: .env
              volumes:
                - "./pocketid:/app/backend/data"
              labels:
                - "traefik.enable=true"
                - "traefik.http.routers.pocket-id.entrypoints=websecure"
                - "traefik.http.routers.pocket-id.rule=Host(`auth.yourdomain.com`)"
                - "traefik.http.routers.pocket-id.tls=true"
                - "traefik.http.routers.pocket-id.tls.certresolver=myresolver"
                - "traefik.http.routers.pocket-id.service=pocket-id"
                - "traefik.http.services.pocket-id.loadbalancer.server.port=80"
                - "traefik.http.routers.pocket-id.middlewares=redirect-to-https"
                - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"          
          EOF
          
          # Create .env file for PocketId
          cat > /home/ubuntu/.env << 'EOF'
          # See the documentation for more information: https://pocket-id.org/docs/configuration/environment-variables
          PUBLIC_APP_URL=https://auth.yourdomain.com
          EOF


          # Set proper ownership
          chown -R ubuntu:ubuntu /home/ubuntu/pocketid
          chown -R ubuntu:ubuntu /home/ubuntu/traefik
          chown ubuntu:ubuntu /home/ubuntu/docker-compose.yml
                    
          echo "PocketID with Traefik setup completed successfully at $(date)!"
          
      Tags:
        - Key: "Name"
          Value: "VPSInstance"

Outputs:
  InstancePublicDNS:
    Description: Public DNS name of the EC2 instance
    Value: !GetAtt VPSInstance.PublicDnsName
  
  SetupInstructions:
    Description: Instructions for setting up DNS
    Value: !Sub |
      Your Docker-enabled EC2 instance is available at: ${VPSInstance.PublicDnsName}
      
      To complete the setup:
      
      1. SSH into your instance using: ssh ubuntu@${VPSInstance.PublicDnsName}
      
      2. Docker and Docker Compose are already installed and ready to use.
      
      3. Deploy your containers using Docker Compose.
      
      4. For web applications, create appropriate DNS records pointing to this instance.
      
      5. Consider setting up SSL certificates for secure HTTPS connections.
